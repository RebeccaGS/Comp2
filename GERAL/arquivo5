/* Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e Computacao
 * EEL270 - Computacao II - Turma 2020/4 - PLE-1
 * Prof. Marcelo Luiz Drumond Lanza
 * Autor: Luiz Carlos Aguiar Carrion
 * Descricao: Funcao que converte arquvio formato Unix
 * para DOS
 *
 * $Author: luiz.carrion $
 * $Date: 2020/10/21 00:49:06 $
 * $Log: aula0804.c,v $
 * Revision 1.3  2020/10/21 00:49:06  luiz.carrion
 * Salva o fopen do orignal na variavel leitura
 *
 * Revision 1.2  2020/10/19 04:52:05  luiz.carrion
 * Adiciona a funcao que converte arquivo formato DOS para Unix
 *
 * Revision 1.1  2020/10/19 04:14:41  luiz.carrion
 * Initial revision
 *
*/

#include "aula08.h"

#define _XOPEN_SOURCE 			600

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <errno.h>


#define RETORNO_DO_CARRO		'\r'
#define ENTER				'\n'
#define EOS				'\0'


#define COMPRIMENTO_MAXIMO_NOME		100


#define TAMANHO_MAXIMO_LINHA		10000

/** CONVERTE UNIX PARA DOS **/
tipoErros ConverterArquivoFormatoUnixFormatoDos (char *original, char *convertido) {

	FILE *leitura, *escrita;

	unsigned indiceLinha;

	unsigned quantidadeLinhas = 0;

	unsigned linhaAtual = 0;

	char leitor[TAMANHO_MAXIMO_LINHA];

	char linhaConvertida[TAMANHO_MAXIMO_LINHA+1];

	/* Arquivo temporario */
	char extensaoArquivoTemporario[COMPRIMENTO_MAXIMO_NOME+24];
	char nomeArquivoTemporario [COMPRIMENTO_MAXIMO_NOME+1];
	int arquivoTemporario;

	boolean criarArquivoTemporario = falso;

	/* Time */
	struct tm *data_hora_atual;
	int ano, mes, dia, hora, minuto, segundo;
	time_t segundos;

	time (&segundos);

	data_hora_atual = localtime (&segundos);

	#ifdef _MY_DEBUG_
	printf ("Funcao ConverterArquivoFormatoUnixFormatoDos\n\n");

	/* Teste: Verificando a data/hora */	
	printf ("Ano: %d\n", data_hora_atual->tm_year + 1900);
	printf ("Mes: %d\n", data_hora_atual->tm_mon + 1);
	printf ("Dia: %d\n", data_hora_atual->tm_mday);
	printf ("Hora: %d\n", data_hora_atual->tm_hour);
	printf ("Minuto: %d\n", data_hora_atual->tm_min);
	printf ("Segundo: %d\n\n", data_hora_atual->tm_sec);
	#endif

	ano = data_hora_atual->tm_year + 1900;
	mes = data_hora_atual->tm_mon + 1;
	dia = data_hora_atual->tm_mday;
	hora = data_hora_atual->tm_hour;
	minuto = data_hora_atual->tm_min;
	segundo = data_hora_atual->tm_sec;

	if (original == NULL) {

		/* ERRO ARQUIVO NULO */
		#ifdef _MY_DEBUG_
		printf ("Nome arquivo original == NULL\n\n");
		#endif

		return originalNulo;
	}
	
	leitura = fopen (original, "r");	
	if (leitura == NULL) {
		/* ERRO ARQUIVO NAO FOI POSSIVEL ABRIR ARQUIVO */	

		#ifdef _MY_DEBUG_
		printf ("Arquivo de leitura nulo\n\n");
		#endif

		return erroAbrirArquivoOriginal;
	}

	#ifdef _MY_DEBUG_
	printf ("Arquivo de leitura aberto\n\n");
	#endif

	/* Cria arquivo temporario */
	if (convertido == NULL) {
		criarArquivoTemporario = verdadeiro;
	} else if (!(strcmp(original, convertido))) {
		criarArquivoTemporario = verdadeiro;
	}

	if (criarArquivoTemporario == verdadeiro) {
		#ifdef _MY_DEBUG_
		printf ("Criando arquivo temporario\n\n");
		#endif

		strcpy (nomeArquivoTemporario, original);
		#ifdef _MY_DEBUG_
		printf ("Nome copiado: %s\n\n", nomeArquivoTemporario);
		#endif

		sprintf (extensaoArquivoTemporario, ".backup-%04d%02d%02d_%02d%02d%02d.XXXXXX", ano, mes, dia, hora, minuto, segundo);
		#ifdef _MY_DEBUG_
		printf ("Extensao: %s\n\n", extensaoArquivoTemporario);
		#endif

		strcat (nomeArquivoTemporario, extensaoArquivoTemporario);
		#ifdef _MY_DEBUG_
		printf ("Nome arquivo temporario: %s\n\n", nomeArquivoTemporario);
		#endif
			
		arquivoTemporario = mkstemp (nomeArquivoTemporario);

		if (!(escrita = fdopen (arquivoTemporario, "w"))) {
			#ifdef _MY_DEBUG_
			printf ("Nao foi possivel abrir o arquivo\n\n");
			printf ("Erro: %s\n", strerror (errno));
			#endif

			fclose (leitura);

			return erroAbrirArquivoTemporario;
		}
	} else {
		if (!(escrita = fopen (convertido, "w"))) {
			#ifdef _MY_DEBUG_
			printf ("Nao foi possivel abrir o arquivo\n\n");
			#endif

			fclose (leitura);

			return erroAbrirArquivoConvertido;
		}
	}

	#ifdef _MY_DEBUG_
	printf ("Arquivo de escrita aberto\n\n");
	#endif

	/* Conta a quantidade de linhas do programa */
	while (fgets(leitor, TAMANHO_MAXIMO_LINHA, leitura)) {
		quantidadeLinhas++;
	}

	fclose (leitura);
	
	#ifdef _MY_DEBUG_
	printf ("Quantidade de Linhas: %u\n", quantidadeLinhas);
	#endif

	leitura = fopen (original, "r");

	/* Faz a conversao */
	linhaAtual = 0;
	while (fgets(leitor, TAMANHO_MAXIMO_LINHA, leitura)) {
		
		#ifdef _MY_DEBUG_
		printf ("%s", leitor);
		#endif

		for (indiceLinha = 0; (leitor[indiceLinha]) && indiceLinha < TAMANHO_MAXIMO_LINHA; indiceLinha++) {
		
			if (leitor[indiceLinha] == ENTER) {

				if (linhaAtual != quantidadeLinhas-1) {
					linhaConvertida[indiceLinha] = RETORNO_DO_CARRO;
					linhaConvertida[indiceLinha + 1] = ENTER;
				}
			} else {
				linhaConvertida[indiceLinha] = leitor[indiceLinha];
			}
		}

		fprintf (escrita, "%s", linhaConvertida);

		#ifdef _MY_DEBUG_
		printf ("Linha %u copiada\n\n", linhaAtual);
		#endif

		linhaAtual++;
		memset (linhaConvertida, 0x00, TAMANHO_MAXIMO_LINHA);
	}
	
	fclose (leitura);
	fclose (escrita);	

	return ok;
}


/** CONVERTE DOS PARA UNIX **/
tipoErros ConverterArquivoFormatoDosFormatoUnix (char *original, char *convertido) {

	FILE *leitura, *escrita;

	unsigned indiceLinha;

	unsigned quantidadeLinhas = 0;

	unsigned linhaAtual = 0;

	char leitor[TAMANHO_MAXIMO_LINHA];

	char linhaConvertida[TAMANHO_MAXIMO_LINHA+1];

	/* Arquivo temporario */
	char extensaoArquivoTemporario[COMPRIMENTO_MAXIMO_NOME+24];
	char nomeArquivoTemporario [COMPRIMENTO_MAXIMO_NOME+1];
	int arquivoTemporario;

	boolean criarArquivoTemporario = falso;

	/* Time */
	struct tm *data_hora_atual;
	int ano, mes, dia, hora, minuto, segundo;
	time_t segundos;

	time (&segundos);

	data_hora_atual = localtime (&segundos);

	#ifdef _MY_DEBUG_
	printf ("Funcao ConverterArquivoFormatoUnixFormatoDos\n\n");

	/* Teste: Verificando a data/hora */	
	printf ("Ano: %d\n", data_hora_atual->tm_year + 1900);
	printf ("Mes: %d\n", data_hora_atual->tm_mon + 1);
	printf ("Dia: %d\n", data_hora_atual->tm_mday);
	printf ("Hora: %d\n", data_hora_atual->tm_hour);
	printf ("Minuto: %d\n", data_hora_atual->tm_min);
	printf ("Segundo: %d\n\n", data_hora_atual->tm_sec);
	#endif

	ano = data_hora_atual->tm_year + 1900;
	mes = data_hora_atual->tm_mon + 1;
	dia = data_hora_atual->tm_mday;
	hora = data_hora_atual->tm_hour;
	minuto = data_hora_atual->tm_min;
	segundo = data_hora_atual->tm_sec;

	if (original == NULL) {

		/* ERRO ARQUIVO NULO */
		#ifdef _MY_DEBUG_
		printf ("Nome arquivo original == NULL\n\n");
		#endif

		return originalNulo;
	}
	
	leitura = fopen (original, "r");	
	if (leitura == NULL) {
		/* ERRO ARQUIVO NAO FOI POSSIVEL ABRIR ARQUIVO */	

		#ifdef _MY_DEBUG_
		printf ("Arquivo de leitura nulo\n\n");
		#endif

		return erroAbrirArquivoOriginal;
	}

	#ifdef _MY_DEBUG_
	printf ("Arquivo de leitura aberto\n\n");
	#endif

	/* Cria arquivo temporario */
	if (convertido == NULL) {
		criarArquivoTemporario = verdadeiro;
	} else if (!(strcmp(original, convertido))) {
		criarArquivoTemporario = verdadeiro;
	}

	if (criarArquivoTemporario == verdadeiro) {
		#ifdef _MY_DEBUG_
		printf ("Criando arquivo temporario\n\n");
		#endif

		strcpy (nomeArquivoTemporario, original);
		#ifdef _MY_DEBUG_
		printf ("Nome copiado: %s\n\n", nomeArquivoTemporario);
		#endif

		sprintf (extensaoArquivoTemporario, ".backup-%04d%02d%02d_%02d%02d%02d.XXXXXX", ano, mes, dia, hora, minuto, segundo);
		#ifdef _MY_DEBUG_
		printf ("Extensao: %s\n\n", extensaoArquivoTemporario);
		#endif

		strcat (nomeArquivoTemporario, extensaoArquivoTemporario);
		#ifdef _MY_DEBUG_
		printf ("Nome arquivo temporario: %s\n\n", nomeArquivoTemporario);
		#endif
			
		arquivoTemporario = mkstemp (nomeArquivoTemporario);

		if (!(escrita = fdopen (arquivoTemporario, "w"))) {
			#ifdef _MY_DEBUG_
			printf ("Nao foi possivel abrir o arquivo\n\n");
			printf ("Erro: %s\n", strerror (errno));
			#endif

			fclose (leitura);

			return erroAbrirArquivoTemporario;
		}
	} else {
		if (!(escrita = fopen (convertido, "w"))) {
			#ifdef _MY_DEBUG_
			printf ("Nao foi possivel abrir o arquivo\n\n");
			#endif

			fclose (leitura);

			return erroAbrirArquivoConvertido;
		}
	}

	#ifdef _MY_DEBUG_
	printf ("Arquivo de escrita aberto\n\n");
	#endif

	/* Conta a quantidade de linhas do programa */
	while (fgets(leitor, TAMANHO_MAXIMO_LINHA, leitura)) {
		quantidadeLinhas++;
	}

	fclose (leitura);
	
	#ifdef _MY_DEBUG_
	printf ("Quantidade de Linhas: %u\n", quantidadeLinhas);
	#endif

	leitura = fopen (original, "r");

	/* Faz a conversao */
	linhaAtual = 0;
	while (fgets(leitor, TAMANHO_MAXIMO_LINHA, leitura)) {
		
		#ifdef _MY_DEBUG_
		printf ("%s", leitor);
		#endif


		for (indiceLinha = 0; (leitor[indiceLinha]) && indiceLinha < TAMANHO_MAXIMO_LINHA; indiceLinha++) {
			if (leitor[indiceLinha] == RETORNO_DO_CARRO) {
				if (linhaAtual != quantidadeLinhas-1) {
					linhaConvertida[indiceLinha] = ENTER;
				}
			} else if (leitor[indiceLinha] != ENTER){
				linhaConvertida[indiceLinha] = leitor[indiceLinha];
			}
		}

		fprintf (escrita, "%s", linhaConvertida);

		#ifdef _MY_DEBUG_
		printf ("Linha %u copiada\n\n", linhaAtual);
		#endif

		linhaAtual++;
		memset (linhaConvertida, 0x00, TAMANHO_MAXIMO_LINHA);
	}
	
	fclose (leitura);
	fclose (escrita);	

	return ok;
}

/* $RCSfile: aula0804.c,v $ */	